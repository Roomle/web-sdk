import { RAPI_PATHS } from '../../../common-core/src/rapi-access';
import { Base64Image, CanvasOffset } from '../../../common-core/src/common-interfaces';
import { KernelParameter, KernelPart, UiPossibleChild } from '../../../typings/kernel';
import { DynamicLightSettingSource } from '../../../common-core/src/lightsetting/dynamic-light-setting-loader';
import { GlobalAPI } from '../../../common-core/src/main';
import { SceneSettings } from '../../../common-core/src/scene-settings-loader';
import { InitData } from '../../../common-core/src/utils/shims';
import ConfiguratorUiCallbacks from './configurator-ui-callback';
import { RapiServerUrlType, RapiId, RapiConfiguration, RapiItem, RapiMaterial, ConfigurationString, RapiConfigurationEnhanced, RapiTagForUi, AssetUrl, RapiAdditionalContent } from '../../../typings/rapi-types';
export interface LoadOptions {
    overrideTenant?: number;
    overrideCountry?: string;
    overrideRapi?: RapiServerUrlType;
    preloadHint?: RapiId;
    applyCurrentGlobalParameters?: boolean;
    id?: string;
}
export default class UiApi implements GlobalAPI {
    private _eventHandler;
    private _webGl;
    private _rapiAccess;
    private _dataSyncer;
    private _errorHandler;
    private _unitFormatter;
    private _domHelper;
    _configuratorUiCallbacks: ConfiguratorUiCallbacks;
    private _isKernelReady;
    private _isLoadError;
    private _rejectOnLoadError;
    private _resolveOnInitDone;
    private _waiterForPreload;
    private _waitingForPreload;
    private _waitingForWebGlLib;
    private _isReloading;
    private _lastPartListHash;
    private readonly _waitingForDependencies;
    constructor();
    private _loadError;
    private _webglLibLoaded;
    private _initPromiseCallback;
    private _notifyOnConfigurationReady;
    private _notifyOnConfigurationLoadingError;
    private _loadItemOrConfigById;
    private _updateCommonComponentParameters;
    private _updatePlanObjectParameters;
    private _updateComponentParameters;
    private _updatePlanComponentPossibleChildren;
    private _updatePlanObjectPossibleChildren;
    private _shouldBroadcastToUi;
    private _isCorrectResponse;
    private _addUiDataToPartList;
    private _updatePlanObject;
    private _partListUpdate;
    private _onLoadConfiguration;
    private _onRemovedPreviews;
    private _updatePossibleChildren;
    private _updateParameters;
    private _notifyUiAboutNewItem;
    private _notifyUiAboutNewConfiguration;
    private _getMaterialGroups;
    private _kernelIsReady;
    private _loadConfiguration;
    private _notifyDependenciesWaiter;
    private _preLoadItemOrConfig;
    private _preloadPackage;
    private _reloadConfiguration;
    private _performLoadConfiguration;
    private _changeHDGeometry;
    setOverrides(options: InitData): void;
    init(element: HTMLElement, options?: InitData): Promise<void>;
    cancelSelection(): void;
    enableHDGeometry(): Promise<{}>;
    disableHDGeometry(): Promise<{}>;
    changeOffset(offset: CanvasOffset): void;
    previewDockings(possibleChild: UiPossibleChild, dragEvent?: DragEvent, dragIn?: boolean): void;
    requestDeleteComponent(): void;
    preparePerspectiveImage(): Promise<Base64Image>;
    saveCurrentConfiguration(): Promise<RapiConfigurationEnhanced>;
    generateImagesOfCurrentConfiguration(): Promise<{}>;
    prepareTopImage(): Promise<Base64Image>;
    resetCameraPosition(): void;
    showBenchmarks(filter?: string): void;
    debugSceneGraph(id?: number): void;
    loadConfiguration(configuration: ConfigurationString, options?: LoadOptions): Promise<KernelPart[]>;
    loadConfigurationById(configurationId: RapiId, options?: LoadOptions): Promise<KernelPart[]>;
    syncPlanObjectToView(conversationId: number, objectId: number): void;
    loadConfigurableItemById(itemId: RapiId, options?: LoadOptions): Promise<KernelPart[]>;
    preLoadConfigurationById(configurationId: RapiId): Promise<RapiConfiguration>;
    preLoadConfigurableItemById(itemId: RapiId): Promise<RapiItem>;
    private _getTag;
    private _dispatchSetParameter;
    setParameter(parameter: KernelParameter, value: string, isRaw?: boolean): Promise<void>;
    enableHD(): Promise<void>;
    disableHD(): Promise<void>;
    enableMultiselect(): void;
    disableMultiselect(): void;
    getCurrentConfiguration(): Promise<ConfigurationString>;
    loadComponentIntoKernel(componentString: string): Promise<void>;
    getShortUrlOfCurrentConfiguration(): Promise<string>;
    formatMMValueToUnitString(value: number, unitType: string): string;
    setFloorMaterial(url: string, width: number, height: number, repeatable: boolean): Promise<void>;
    getTagById(tagId: RapiId, options?: {
        include: RAPI_PATHS[];
    }): Promise<RapiTagForUi>;
    requestAsset(url: string): AssetUrl;
    changeFloorMaterial(material: RapiMaterial): Promise<void>;
    openFloorMaterials(): void;
    openPartList(): void;
    getAdditionalContentsOf(rapiItems: RapiItem[]): Promise<RapiAdditionalContent[]>;
    changeTypeChangeTag(rapiId: RapiId): void;
    removeTypeChangeTag(rapiId: RapiId): void;
    showGUI(): void;
    showStats(): void;
    showDimensions(): void;
    hideDimensions(): void;
    syncCatalog(catalogId: RapiId): Promise<void>;
    syncFloorTag(tagId: RapiId): Promise<void>;
    syncTypeChangeTag(tagId: RapiId): Promise<void>;
    loadDynamicLightSetting(source: DynamicLightSettingSource): Promise<void>;
    setBackgroundColor(hex: string): void;
    setBackgroundImage(url: string): void;
    loadSceneSetting(sceneSettings: SceneSettings): Promise<{}>;
    enableMeshSelection(enabled: boolean): void;
    updateSize(): void;
    cleanup(): void;
    resume(): void;
    zoomIn(value?: number): void;
    zoomOut(value?: number): void;
    readonly callbacks: ConfiguratorUiCallbacks;
}
