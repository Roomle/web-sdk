import { PreviewComponent, RoomleComponent } from '../../../common-core/src/webgl/roomle-component-factory';
import { UIIntersections } from '../utils/ui-intersection-helper';
import ConfiguratorContext from '../webgl/configurator-context';
import { Base64Image, CanvasOffset } from '../../../common-core/src/common-interfaces';
import { KernelVector3, UiPossibleChild } from '../../../typings/kernel';
import { DynamicLightSettingSource } from '../../../common-core/src/lightsetting/dynamic-light-setting-loader';
import { SceneSettings } from '../../../common-core/src/scene-settings-loader';
import { Base64String, RapiJson, RapiMaterial, RapiTexture } from '../../../typings/rapi-types';
import { Context } from '../../../common-core/src/di/context';
export interface Base64Image {
    image: Base64String;
    width: number;
    height: number;
}
export default class WebGl implements Context {
    _creator_: string;
    private _scriptLoader;
    private _eventHandler;
    private _rapiAccess;
    private _memoryManager;
    private _sceneHelper;
    private _needsSync;
    private _updatedOffset;
    context: ConfiguratorContext;
    constructor(creator: string);
    private _subscribeToKernelEvent;
    private _loadWebGlLib;
    private _loadingError;
    private _loadingSuccess;
    private _loadingControlsSuccess;
    private _loadingControlsError;
    private _createComponent;
    private _bakedMeshLoaded;
    private _namedMeshLoaded;
    private _componentConstructionBegin;
    private _componentConstructionDone;
    private _componentGeometryNotReady;
    private _dockComponent;
    private _updateComponent;
    private _deleteComponent;
    private _sceneCleared;
    private _createPreview;
    private _setPreviewAssociations;
    private _setPreviewLineAssociations;
    private _previewConstructionDone;
    clearScene(): void;
    private _planObjectCreate;
    private _planObjectUpdate;
    private _planObjectConstructionDone;
    private _enableRootComponentParametersAsGlobal;
    private _disableRootComponentParametersAsGlobal;
    private _requestDeleteComponent;
    private _requestDeleteComponents;
    private _configurationLoaded;
    private _notifyOnMaterialFinished;
    onSelectedRuntimeComponentChange(component: RoomleComponent): void;
    onSelectedRuntimeComponentsChange(selectedRuntimeComponentIds: number[]): void;
    debugSceneGraph(id?: number): void;
    requestMaterial(materialId: string): Promise<RapiMaterial>;
    requestTextures(material: RapiJson): Promise<RapiTexture[]>;
    requestDockingsPreview(userInitiated: boolean, possibleChild?: UiPossibleChild, dragEvent?: DragEvent, dragIn?: boolean): void;
    dockComponent(previewComponent: PreviewComponent): void;
    dockComponentWithPosition(previewComponent: PreviewComponent, position: KernelVector3): void;
    requestDockingsPreviewWithDrag(componentId: number): void;
    preparePerspectiveImage(): Promise<Base64Image>;
    prepareTopImage(): Promise<Base64Image>;
    resetCameraPosition(): void;
    changeOffset(offset: CanvasOffset): void;
    cancelSelection(): void;
    sendCancelSelectionEvent(): void;
    notifyNoPreviews(): void;
    enableHD(source?: DynamicLightSettingSource): Promise<void>;
    disableHD(): Promise<void>;
    enableMultiselect(): void;
    disableMultiselect(): void;
    requestDeleteComponent(): void;
    requestDeleteSelectedComponent(): void;
    onUiIntersectionChange(intersections: UIIntersections): void;
    onDimensionsVisibilityChange(visible: boolean): void;
    onRemovePreviews(arePreviewsExisting: boolean): void;
    cleanUp(): void;
    openAddOns(): void;
    clickOutside(): void;
    setFloorMaterial(url: string, width: number, height: number, repeatable: boolean): Promise<void>;
    changeFloorMaterial(material: RapiMaterial): Promise<void>;
    showGUI(): void;
    showStats(): void;
    stopRenderLoop(): void;
    showDimensions(): void;
    hideDimensions(): void;
    loadDynamicLightSetting(source: DynamicLightSettingSource): Promise<void>;
    loadSceneSettings(sceneSetting: SceneSettings): Promise<{}>;
    setBackgroundColor(hex: string): void;
    setBackgroundImage(url: string): void;
    updateSize(): void;
    zoomIn(value?: number): void;
    zoomOut(value?: number): void;
    onZoomChanged(minZoom?: boolean, maxZoom?: boolean): void;
}
