import { KernelComponent, KernelEnum, KernelVector3 } from '../../../typings/kernel';
import PlanViewModel from '../view-model/plan-view-model';
import PlanObjectViewModel from '../view-model/plan-object-view-model';
import { KernelObject, Plan, PlanElement, PlanInteractionHandler, PlanObject } from '../../../typings/planner';
import CommonKernelAccess from '../../../common-core/src/services/common-kernel-access';
import { ConfigurationString, RapiItem } from '../../../typings/rapi-types';
import RoomlePlannerUiCallback from '../roomle-planner-ui-callback';
export interface PlannerKernelCallbackI {
    handlerSwitchedPlans(planViewModel: PlanViewModel): void;
    planCompletelyLoaded(plan: Plan): void;
    beginPlanConstruction(plan: Plan): void;
    addPlanMesh(plan: Plan, material: any, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array, type: KernelEnum): void;
    endPlanConstruction(plan: Plan): void;
    addPlanObjectToScene(object3D: THREE.Object3D): void;
    planElementChanged(plan: Plan, planObject: PlanObjectViewModel): void;
}
export interface ConfiguratorKernelCallbackI {
    Editor3dComponentCreated(id: number, position: KernelVector3, eulerAngles: KernelVector3, parentObjectRuntimeId: number, isRootComponent: boolean): void;
    Editor3dAddBakedMesh(runtimeComponentId: number, materialId: string, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array): void;
    Editor3dAddNamedMesh(runtimeComponentId: number, meshId: string, materialId: string, transform: Float32Array, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array): void;
    updateComponentMetaInformation(component: KernelComponent): void;
    Editor3dBeginConstruction(componentId: number): void;
    Editor3dComponentDocked(componentId: number, parentId: number, componentPosition: KernelVector3, componentRotation: KernelVector3): void;
    Editor3dGeometryNotReady(id: number): void;
    componentDeleted(componentId: number): void;
    sceneCleared(): void;
}
export default class PlannerKernelAccess extends CommonKernelAccess {
    private _kernelCallback;
    private _roomlePlannerUiCallback;
    private _planInteractionHandler;
    private _plannerKernelCallbackListener;
    private _configuratorKernelCallbackListener;
    readonly kernelContainer: any;
    constructor(creator: string);
    private _loadSuccess;
    private _loadError;
    private _createPlanInteractionHandler;
    addPlannerListener(listener: PlannerKernelCallbackI): void;
    removePlannerListener(listener: PlannerKernelCallbackI): void;
    addConfiguratorListener(listener: ConfiguratorKernelCallbackI): void;
    removeConfiguratorListener(listener: ConfiguratorKernelCallbackI): void;
    isReady(): void;
    readonly callbacks: RoomlePlannerUiCallback;
    readonly planInteractionHandler: PlanInteractionHandler;
    readonly planModelViewHelper: any;
    catalogItemLoaded(catalogItem: RapiItem): void;
    onLoadComponentError(error: Error): void;
    configurationLoaded(conversationId: number, objectId: number, componentId: number, hash: string, errors: any): void;
    componentDefinitionLoaded(conversationId: number, componentId: number): void;
    componentDefinitionLoadingError(conversationId: number, errorMessage: string): void;
    configurationLoadingError(): void;
    componentConfigurationUpdated(componentId: number): void;
    componentMetaUpdated(componentId: number): void;
    componentParameters(): void;
    componentDeleted(componentId: number): void;
    requestComponentDimensions(): void;
    planObjectCreated(conversationId: number, planObjectId: number): void;
    planObjectUpdated(planObjectId: number): void;
    planObjectConfigurationUpdated(planObjectId: number, configuration: ConfigurationString, hash: string): void;
    planObjectDeleted(): void;
    requestPlanObjectDimensions(): void;
    sceneCleared(): void;
    cleanUpCallbacks(): void;
    registerCallbacks(): void;
    requestExternalMesh(meshId: string, quality: number): Promise<{}>;
    Editor3dComponentCreated(id: number, position: KernelVector3, eulerAngles: KernelVector3, parentObjectRuntimeId: number): void;
    Editor3dRootComponentCreated(id: number, position: KernelVector3, eulerAngles: KernelVector3, parentObjectRuntimeId: number): void;
    Editor3dBeginConstruction(id: number): void;
    Editor3dEndConstruction(id: number): void;
    Editor3dGeometryReady(id: number): void;
    Editor3dGeometryNotReady(id: number): void;
    Editor3dPlanObjectConstructionDone(planObjectId: number): void;
    Editor3dBeginGroup(): void;
    Editor3dEndGroup(): void;
    Editor3dSetMaterial(): void;
    Editor3dLoadMaterial(): void;
    Editor3dAddDockPreview(componentId: number, previewId: number): void;
    Editor3dSetPreviewPointAssociations(dockPairs: any, previewId: number): void;
    Editor3dSetPreviewLineAssociations(dockLines: any, previewId: number): void;
    Editor3dPreviewConstructionDone(componentId: number, objectId: number): void;
    Editor3dTranslateBy(): void;
    Editor3dRotateBy(): void;
    Editor3dRotateAround(): void;
    Editor3dAddCube(): void;
    Editor3dAddCubeUVMod(): void;
    Editor3dAddSphere(): void;
    Editor3dAddSphereUVMod(): void;
    Editor3dAddRectangle(): void;
    Editor3dAddRectangleUVMod(): void;
    Editor3dAddMesh(): void;
    Editor3dAddMeshUVMod(): void;
    Editor3dAddMeshUVCoord(): void;
    Editor3dAddCylinder(): void;
    Editor3dAddCylinderUVMod(): void;
    Editor3dAddPrism(): void;
    Editor3dAddPrismUVMod(): void;
    Editor3dAddFittingPoint(): void;
    Editor3dAddFittingLine(): void;
    Editor3dSelectObject(): void;
    Editor3dCopy(): void;
    Editor3dComponentDocked(componentId: number, parentId: number, componentPosition: KernelVector3, componentRotation: KernelVector3): void;
    Editor3dUpdatePlanObjectPosition(): void;
    Editor3dUpdatePlanObjectRotation(): void;
    Editor3dUpdatePlanObjectTransform(): void;
    Editor3dUpdatePlanComponentPosition(): void;
    Editor3dUpdatePlanComponentRotation(): void;
    Editor3dUpdatePlanComponentTransform(): void;
    Editor3dAddBakedMesh(runtimeComponentId: number, materialId: string, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array): void;
    Editor3dAddNamedMesh(runtimeComponentId: number, meshId: string, materialId: string, transform: Float32Array, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array): void;
    planElementRemoved(element: PlanElement): void;
    handlerSwitchedPlans(fromPlan: Plan, toPlan: Plan): void;
    planBoundsChanged(): void;
    planCleared(): void;
    planCompletelyLoaded(plan: Plan): void;
    planElement3dMeshChanged(plan: any, element: any): void;
    planElementAdded(plan: Plan, element: PlanElement): void;
    planElementChanged(plan: Plan, element: KernelObject): void;
    planHistoryStateChanged(): void;
    planObjectConfigurationCreated(plan: Plan, element: PlanObject): void;
    planObjectConfigurationLoaded(plan: Plan, element: PlanElement, success: boolean): void;
    requestCatalogItem(catalogItemId: string): void;
    startedDrawing(): void;
    stoppedDrawing(): void;
    updateMesh2d(): void;
    beginConstruction(): void;
    addMesh(): void;
    endConstruction(): void;
    beginPlanConstruction(plan: Plan): void;
    addPlanMesh(plan: Plan, material: any, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array, type: KernelEnum): void;
    endPlanConstruction(plan: Plan): void;
    private _coupleReferences;
    private _decoupleReferences;
}
