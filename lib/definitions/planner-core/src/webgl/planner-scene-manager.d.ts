import { CanvasOffset } from '../../../common-core/src/common-interfaces';
import { PlannerKernelCallbackI } from '../services/planner-kernel-access';
import { Plan, PlanObject } from '../../../typings/planner';
import PlanViewModel from '../view-model/plan-view-model';
import SceneManager from '../../../common-core/src/webgl/scene-manager';
import { KernelEnum } from '../../../typings/kernel';
import { RoomlePlannerCallback } from '../roomle-planner';
import PlanObjectViewModel from '../view-model/plan-object-view-model';
import InputManager from '../../../common-core/src/input/input-manager';
import { CAMERA_TYPE } from '../roomle-planner-ui-callback';
export default class PlannerSceneManager extends SceneManager implements PlannerKernelCallbackI {
    private _plannerKernelAccess;
    private _rapiAccess;
    private _plannerMeshGenerator;
    private _plannerInputManager;
    private _roomlePlannerUiCallback;
    private _plannerSceneEventHandler;
    private _componentFactory;
    private _roomlePlannerCallback;
    private _sky;
    private _bounds;
    private _savedState;
    private _last3DState;
    private _planId;
    private _preloadScene;
    private _constructionGroup;
    private _initialMode;
    constructor(offset: CanvasOffset, plannerCallback: RoomlePlannerCallback, mode?: CAMERA_TYPE);
    zoomToComponent(planObject: PlanObjectViewModel): void;
    protected onBeforeRender(): void;
    protected _getInputManager(): InputManager;
    protected createCameraControl(mode: CAMERA_TYPE): void;
    resetCamera(): void;
    resetCameraToState(): void;
    resetCameraPositionToStart(): void;
    private _getYRotationOfObject;
    loadPlanObjects(planObjects: PlanObject[]): void;
    private _staticItemsLoaded;
    preload(id: string): void;
    private _addStaticItem;
    private _getGLBUrl;
    planXMLLoaded(plan: Plan): void;
    planCompletelyLoaded(plan: Plan): void;
    handlerSwitchedPlans(planViewModel: PlanViewModel): void;
    beginPlanConstruction(plan: Plan): void;
    addPlanMesh(plan: Plan, material: any, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array, type: KernelEnum): void;
    endPlanConstruction(plan: Plan): void;
    addPlanObjectToScene(object3D: THREE.Object3D): void;
    exportGLB(exportObjects?: THREE.Object3D[], id?: string): void;
    importGLB(url: string): void;
    private _addSky;
    switchTo2D(): void;
    switchTo3D(): void;
    cameraControlChanged(): void;
    private _switchToHSC;
    closeHSC(): void;
    switchToFirstPerson(): void;
    private _getConstructionBounds;
    protected _onKeyDown(event: KeyboardEvent): void;
    setMode(mode: CAMERA_TYPE): void;
}
