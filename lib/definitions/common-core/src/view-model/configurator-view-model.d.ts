import { PreviewComponent, PreviewLineComponent, RoomleComponent, RoomleComponentFactory } from '../../../common-core/src/webgl/roomle-component-factory';
import { ConfiguratorKernelCallbackI } from '../kernel-access';
import { KernelComponent, KernelEnum, KernelVector3, PlanObject } from '../../../typings/kernel';
import { ConfigurationString } from '../../../typings/rapi-types';
import { Context } from '../di/context';
import CommonKernelAccess from '../services/common-kernel-access';
export declare const DOCKING_CONVERSATION_ID = 10;
export declare const DEFAULT_CONVERSATION_ID = 9;
export interface ConfiguratorViewModelCallbackI {
    componentUpdated(component: RoomleComponent, kernelComponent: KernelComponent): void;
    componentDeleted(component: RoomleComponent): void;
    planObjectUpdated(planObject: PlanObject): void;
    planObjectConstructionDone(planObject: PlanObject): void;
    previewConstructionDone(component: RoomleComponent, hasPreviews: boolean): void;
    configurationLoaded(component: RoomleComponent, isFreeFlying: boolean): void;
    clearScene(): void;
    display(component: RoomleComponent): void;
    addComponentHandlers(component: RoomleComponent): void;
    addPreviewLineHandlers(previewLineComponent: PreviewLineComponent): void;
    addPreviewHandlers(previewComponent: PreviewComponent): void;
}
export default class ConfiguratorViewModel implements ConfiguratorKernelCallbackI, Context {
    _creator_: string;
    private _configuratorMeshGenerator;
    private _configuratorContext;
    private _cacheHolder;
    private _listener;
    private _mergeThreshold;
    private _componentsToMerge;
    private _mergeInProgress;
    private _geometriesMerged;
    protected _components: Map<number, RoomleComponent>;
    private _previews;
    protected _componentFactory: RoomleComponentFactory;
    constructor(creator: string);
    waitingForMaterials: Array<Promise<void>>;
    protected _getKernelAccess(): CommonKernelAccess;
    clearReference(): void;
    private _addMeshToComponent;
    tryToMergeComponents(): void;
    private _requestMergeComponents;
    private _mergeNextComponent;
    private _mergeComponent;
    protected _addRootComponent(component: RoomleComponent): void;
    removeDockingComponent(): void;
    protected dockComponent(componentId: number, parentId: number, componentPosition: KernelVector3, componentRotation: KernelVector3): void;
    dockComponentWithPosition(previewComponent: PreviewLineComponent, component?: RoomleComponent): void;
    removePreviews(): void;
    private _updatePlanObject;
    Editor3dAddBakedMesh(runtimeComponentId: number, materialId: string, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array): void;
    Editor3dAddDockPreview(componentId: number, previewId: number): void;
    Editor3dAddNamedMesh(runtimeComponentId: number, meshId: string, materialId: string, transform: Float32Array, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array): void;
    Editor3dBeginConstruction(componentId: number): void;
    Editor3dComponentCreated(id: number, position: KernelVector3, eulerAngles: KernelVector3, parentObjectRuntimeId: number, isRootComponent: boolean): void;
    Editor3dComponentDocked(componentId: number, parentId: number, componentPosition: KernelVector3, componentRotation: KernelVector3): void;
    Editor3dEndConstruction(id: number): void;
    Editor3dGeometryReady(id: number): void;
    Editor3dGeometryNotReady(id: number): void;
    Editor3dPlanObjectConstructionDone(planObjectId: number): void;
    Editor3dPreviewConstructionDone(componentId: number, objectId: number): void;
    Editor3dSetPreviewLineAssociations(dockLines: any, previewId: number): void;
    Editor3dSetPreviewPointAssociations(dockPairs: any, previewId: number): void;
    componentDeleted(componentId: number): void;
    componentMetaUpdated(kernelComponent: KernelComponent): void;
    configurationLoaded(conversationId: number, objectId: number, componentId: number, hash: string, errors: any): void;
    finishParameterChange(resolve: () => void, reject: () => void): void;
    planObjectConfigurationUpdated(planObjectId: number, configuration: ConfigurationString, hash: string): void;
    planObjectCreated(conversationId: number, planObjectId: number): void;
    planObjectUpdated(planObject: PlanObject): void;
    sceneCleared(): void;
    setListener(listener: ConfiguratorViewModelCallbackI): void;
    getBoundingBox(): THREE.Box3;
    hasPreviews(): boolean;
    clearRootComponent(): void;
    debugSceneGraph(id?: number): void;
    getComponentsForIds(ids: number[]): RoomleComponent[];
    isPreviewLine(obj: RoomleComponent): boolean;
    isPreview(obj: RoomleComponent): boolean;
    setGeometriesMergedListener(fun: () => void): void;
    removeGeometriesMergedListener(): void;
    setMergeThreshold(threshold: number): void;
    protected _generateMesh(runtimeComponentId: number, meshId: string, materialId: string, vertices: Int32Array, indices: Int32Array, uvCoords: Float32Array, normals: Float32Array, type?: KernelEnum, newGeometryInstance?: boolean): THREE.Mesh;
    protected _setMaterial(mesh: THREE.Mesh, material: any, type?: KernelEnum): void;
    constructComponents(planObjectId: number): void;
}
