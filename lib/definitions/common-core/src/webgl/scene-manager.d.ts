import { CanvasOffset } from '../common-interfaces';
import DomHelper from '../utils/dom-helper';
import InputManager from '../input/input-manager';
import ScriptLoader from '../script-loader';
import CameraControl from '../cameracontrol/camera-control';
import LightSetting from '../lightsetting/light-setting';
import { CAMERA_TYPE } from '../../../planner-core/src/roomle-planner-ui-callback';
export default abstract class SceneManager {
    protected _domHelper: DomHelper;
    private _environmentLoader;
    protected _scriptLoader: ScriptLoader;
    protected _scene: THREE.Scene;
    protected _cameraControl: CameraControl;
    protected _lightSetting: LightSetting;
    protected _renderer: THREE.WebGLRenderer;
    private _clock;
    private _delta;
    private _devicePixelRatio;
    protected _renderLoopFunction: () => void;
    protected _stopRendering: boolean;
    protected _pixotron: any;
    private _forceRender;
    private _lastChange;
    private _running;
    protected _gltfLoader: any;
    protected _width: number;
    protected _height: number;
    private _statsHelper;
    protected abstract createCameraControl(mode: CAMERA_TYPE): void;
    protected abstract _getInputManager(): InputManager;
    protected onBeforeRender(): void;
    constructor(offset: CanvasOffset, canvasID: string, mode?: CAMERA_TYPE, transparent?: boolean);
    protected _changeCameraControl(cameraControl: CameraControl): void;
    cameraControlChanged(): void;
    protected _addCameraControlListener(): void;
    protected _requestRender(forceRender?: boolean): void;
    private _animateCamera;
    private _setupScene;
    private _tabVisible;
    updateCamera(): void;
    private _onWindowResize;
    protected _isPartOfScene(object: THREE.Object3D): boolean;
    cleanUp(): void;
    clearScene(): void;
    enableHD(): void;
    protected _loadGLTF(gltfJSON: string, position?: THREE.Vector3, rotation?: number, scale?: THREE.Vector3, color?: number): Promise<THREE.Object3D>;
    private _calculateBoundingBoxOfAllMeshes;
    protected _loadGLB(url: string, position?: THREE.Vector3, rotation?: number, scale?: THREE.Vector3, color?: number): Promise<THREE.Object3D>;
    showGUI(): void;
    private _guiLoaded;
    private _addGUIListener;
    showStats(): void;
    protected _onKeyDown(event: KeyboardEvent): void;
}
