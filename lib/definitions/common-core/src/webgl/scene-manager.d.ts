import { CanvasOffset } from '../common-interfaces';
import DomHelper from '../utils/dom-helper';
import InputManager from '../input/input-manager';
import { GUI } from 'dat.gui';
import ScriptLoader from '../script-loader';
import CameraControl from '../cameracontrol/camera-control';
import LightSetting from '../lightsetting/light-setting';
import { CAMERA_TYPE } from '../cameracontrol/camera-type';
import { Context } from '../di/context';
import { LifeCycleCallbacks } from '../life-cycle-manager';
import { SceneSettings } from '../scene-settings-loader';
import Environment from '../environment/environment';
import { QualitySetting } from '../dynamic-quality-setting-loader';
import { Pixotron } from '../../../typings/pixotron';
import EnvironmentLoader from '../services/environment-loader';
import PixotronUtil from './pixotron-util';
import { DynamicLightSettingSource } from '../lightsetting/dynamic-light-setting-loader';
export default abstract class SceneManager implements Context, LifeCycleCallbacks, EventListenerObject {
    _creator_: string;
    protected _domHelper: DomHelper;
    protected _scriptLoader: ScriptLoader;
    private _lifeCycleManager;
    private _staticItemLoader;
    protected _environmentLoader: EnvironmentLoader;
    protected _scene: THREE.Scene;
    protected _cameraControl: CameraControl;
    protected _lightSetting: LightSetting;
    protected _environment: Environment;
    protected _renderer: THREE.WebGLRenderer;
    private _clock;
    private _delta;
    private _devicePixelRatio;
    protected _renderLoopFunction: () => void;
    protected _renderListener: () => void;
    protected _stopRendering: boolean;
    protected _pixotron: Pixotron;
    protected _pixotronUtil: PixotronUtil;
    private _forceRender;
    private _lastChange;
    private _running;
    protected _width: number;
    protected _height: number;
    private _statsHelper;
    private _canvasID;
    protected abstract createCameraControl(mode: CAMERA_TYPE): void;
    protected abstract _getInputManager(): InputManager;
    abstract sceneChanged(): void;
    abstract getPixotronParams(): any;
    protected onBeforeRender(): void;
    protected _onAfterRender: () => void;
    constructor(creator: string, offset: CanvasOffset, canvasID: string, mode?: CAMERA_TYPE, transparent?: boolean);
    protected _changeCameraControl(cameraControl: CameraControl): void;
    cameraControlChanged(): void;
    protected _addCameraControlListener(): void;
    protected _requestRender(forceRender?: boolean): void;
    private _animateCamera;
    protected _setupScene(offset?: CanvasOffset, transparent?: boolean): void;
    private _tabVisible;
    setupScene(offset?: CanvasOffset, transparent?: boolean): void;
    updateCamera(): void;
    private _onWindowResize;
    protected _isPartOfScene(object: THREE.Object3D): boolean;
    cleanUp(): void;
    clearScene(): void;
    enableHD(): void;
    protected _addGroundShadows(): void;
    protected _loadGLTF(gltfJSON: string, position?: THREE.Vector3, rotation?: number, size?: THREE.Vector3, scale?: THREE.Vector3, color?: number): Promise<THREE.Object3D>;
    protected _loadGLB(url: string, position?: THREE.Vector3, rotation?: number, size?: THREE.Vector3, scale?: THREE.Vector3, color?: number, colorable?: boolean): Promise<THREE.Object3D>;
    private _setCamera;
    showGUI(): void;
    protected _guiLoaded(): void;
    protected _addGUIListener(gui: GUI): void;
    protected _guiParamChanged(): void;
    showStats(): void;
    protected _onKeyDown(event: KeyboardEvent): void;
    protected _onKeyUp(event: KeyboardEvent): void;
    pause(): void;
    resume(): void;
    destroy(): void;
    handleEvent(evt: Event): void;
    loadSceneSettings(sceneSetting: SceneSettings): Promise<void>;
    protected _setEnvironment(environment: Environment): void;
    loadQualitySetting(qualitySetting: QualitySetting): void;
    loadDynamicLightSetting(source: DynamicLightSettingSource): Promise<void>;
}
