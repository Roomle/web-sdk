import { Dimensioning, KernelCube, KernelEnum } from '../../../typings/kernel';
import { RapiMaterial, RapiMaterialShading, RapiTexture } from '../../../typings/rapi-types';
import EnvironmentLoader from '../services/environment-loader';
export declare const PREVIEW_LINE_MATERIAL_OPACITY = 0.4;
export declare const PREVIEW_MATERIAL_COLOR = "#DDDDDD";
export declare const PREVIEW_MATERIAL_ROUGHNESS = 1;
export declare const PREVIEW_MATERIAL_METALNESS = 0;
export declare const PREVIEW_MATERIAL_OPACITY = 1;
export declare const getScreenXY: (obj: import("three").Vector3, camera: import("three").PerspectiveCamera, clientWidth: number, clientHeight: number) => import("three").Vector3;
export declare const kernelBoxToThreeBox: (kernelCube: KernelCube, margin?: import("three").Vector3) => import("three").Box3;
export declare const kernelDimensioningToThree: (dimensions: Dimensioning) => Dimensioning;
export declare const addSpacingToBox: (box: import("three").Box3, spacing: number) => void;
export declare const setShadows: (object: import("three").Object3D, receiveShadow: boolean, castShadow: boolean) => void;
export declare const position3VectorsAreEqual: (a: import("three").Vector3, b: import("three").Vector3) => boolean;
export declare const rotationQuaternionsAreEqual: (a: import("three").Quaternion, b: import("three").Quaternion) => boolean;
export declare const position2VectorsAreEqual: (a: import("three").Vector2, b: import("three").Vector2) => boolean;
export declare const createColorTexture: (red: number, green: number, blue: number, alpha: number) => import("three").DataTexture;
export declare const createMaterial: (material: RapiMaterial, environmentLoader?: EnvironmentLoader) => import("three").MeshPhysicalMaterial;
export declare const getMaterialShading: (material: import("three").MeshPhysicalMaterial) => RapiMaterialShading;
export declare const logColor: (color: import("three").Color) => void;
export declare const createTexture: (texture: import("three").Texture, rapiTexture: RapiTexture, width: number, height: number, maxAnisotropy: number) => import("three").Texture;
export declare const addTexture: (assetUrl: string, rapiTexture: RapiTexture, material: import("three").MeshPhysicalMaterial, maxAnisotrophy: number, repeatWidth: number, repeatHeight: number) => Promise<void>;
export declare const getGUI: (autoplace?: boolean) => import("dat.gui").GUI;
export declare const setWallTransparencyBasedOnCamera: (camera: import("three").Camera, material: import("three").Material, animate?: boolean) => void;
export declare const setWallTransparency: (material: import("three").Material, transparent: boolean, animate?: boolean) => void;
export declare const getColorFromInt: (combinedColor: number) => import("three").Color;
export declare const fadeIn: (object: import("three").Object3D) => void;
export declare const fadeOut: (object: import("three").Object3D, scene?: import("three").Scene) => void;
export declare const checkGLB: (glb: import("three").Object3D, url: string) => boolean;
export declare const dispose: (object: import("three").Object3D) => void;
export declare const disposeObject: (object: import("three").Object3D) => void;
export declare const disposeMesh: (mesh: import("three").Mesh) => void;
export declare const disposeGeometry: (geometry: import("three").Geometry) => void;
export declare const disposeMaterial: (material: import("three").MeshStandardMaterial) => void;
export declare const getBoundingBoxMaterial: () => import("three").MeshBasicMaterial;
export declare const getSelectionGeometry: (position: import("three").Vector3, size: import("three").Vector3) => import("three").Geometry;
export declare const vectorIsZero: (vector: import("three").Vector3) => boolean;
export declare const getMaterialId: (material: any, type?: KernelEnum) => string;
export declare const vectorIsEqual: (vector1: import("three").Vector3, vector2: import("three").Vector3, tolerance?: number) => boolean;
