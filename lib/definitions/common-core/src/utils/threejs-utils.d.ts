import { KernelCube } from '../../../typings/kernel';
import { RapiMaterial, RapiTexture } from '../../../typings/rapi-types';
export declare const PREVIEW_MATERIAL_OPACITY = 0.6;
export declare const PREVIEW_LINE_MATERIAL_OPACITY = 0.4;
export declare const PREVIEW_MATERIAL_COLOR = "#DDDDDD";
export declare const PREVIEW_MATERIAL_ROUGHNESS = 1;
export declare const PREVIEW_MATERIAL_METALNESS = 0.5;
export declare const getScreenXY: (obj: import("three/three-core").Vector3, camera: import("three/three-core").PerspectiveCamera, clientWidth: number, clientHeight: number) => import("three/three-core").Vector3;
export declare const kernelBoxToThreeBox: (kernelCube: KernelCube, margin?: import("three/three-core").Vector3) => import("three/three-core").Box3;
export declare const addSpacingToBox: (box: import("three/three-core").Box3, spacing: number) => void;
export declare const setShadows: (object: import("three/three-core").Object3D, receiveShadow: boolean, castShadow: boolean) => void;
export declare const position3VectorsAreEqual: (a: import("three/three-core").Vector3, b: import("three/three-core").Vector3) => boolean;
export declare const rotationQuaternionsAreEqual: (a: import("three/three-core").Quaternion, b: import("three/three-core").Quaternion) => boolean;
export declare const position2VectorsAreEqual: (a: import("three/three-core").Vector2, b: import("three/three-core").Vector2) => boolean;
export declare const createMaterial: (material: RapiMaterial, envMap?: import("three/three-core").Texture) => import("three/three-core").MeshPhysicalMaterial;
export declare const createTexture: (texture: import("three/three-core").Texture, rapiTexture: RapiTexture, width: number, height: number, maxAnisotropy: number) => import("three/three-core").Texture;
export declare const addTexture: (assetUrl: string, rapiTexture: RapiTexture, material: import("three/three-core").MeshPhysicalMaterial, maxAnisotrophy: number, repeatWidth: number, repeatHeight: number) => Promise<void>;
export declare const getGUI: () => import("dat.gui").GUI;
export declare const setWallTransparencyBasedOnCamera: (camera: import("three/three-core").Camera, material: import("three/three-core").Material, animate?: boolean) => void;
export declare const setWallTransparency: (material: import("three/three-core").Material, transparent: boolean, animate?: boolean) => void;
export declare const getColorFromInt: (combinedColor: number) => import("three/three-core").Color;
export declare const fadeIn: (object: import("three/three-core").Object3D) => void;
export declare const fadeOut: (object: import("three/three-core").Object3D, scene?: import("three/three-core").Scene) => void;
export declare const checkGLB: (glb: import("three/three-core").Object3D, url: string) => boolean;
export declare const dispose: (object: import("three/three-core").Object3D) => void;
export declare const disposeObject: (object: import("three/three-core").Object3D) => void;
export declare const disposeMesh: (mesh: import("three/three-core").Mesh) => void;
export declare const disposeGeometry: (geometry: import("three/three-core").Geometry) => void;
export declare const disposeMaterial: (material: import("three/three-core").MeshStandardMaterial) => void;
export declare const getBoundingBoxMaterial: () => import("three/three-core").MeshBasicMaterial;
export declare const getSelectionGeometry: (position: import("three/three-core").Vector3, size: import("three/three-core").Vector3) => import("three/three-core").Geometry;
export declare const vectorIsZero: (vector: import("three/three-core").Vector3) => boolean;
