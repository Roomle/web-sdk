const getAllParameters=function(e){e||(e=window.location.href);const t=e.split("?");if(2!==t.length)return{};const s=t[1].split("&");let r={};return s.forEach(e=>{const t=e.split("=");let s=t[1];"true"===s&&(s=!0),"false"===s&&(s=!1),function(e){return t=e,!Number.isNaN(t)&&!isNaN(t)&&Number.isFinite(parseFloat(e));var t}(s)&&(s=parseFloat(s)),r[t[0]]=s}),r};let actualConversationId=0;class CommunicationInterface{constructor(e,t){this._callbacks=e,this.eventListener=t,this.eventListener.addEventListener("message",this,!1)}get eventPoster(){return this._eventPoster&&this._eventPoster.postMessage?this._eventPoster:this.eventListener&&this.eventListener.postMessage?this.eventListener:{postMessage:()=>void 0}}hasEventPoster(){return!!this._eventPoster}nextConversationId(){return actualConversationId++}setEventPoster(e){this._eventPoster=e}handleEvent(e){if(!e||!e.data)return;const[t,s,r]=JSON.parse(e.data);if(!t||0!==t.indexOf("rml"))return;const[n,a]=t.split("."),o=parseInt(a,10);this._callbacks.onCommand(o,parseInt(s,10),r)}}class MainThreadToWorker extends CommunicationInterface{constructor(e,t){super(e,t),this._promiseCallbacks=new Map}sendToWorker(e,t=null,s,r){const n=this.nextConversationId(),a=()=>!1;!s&&r&&(s=a),s&&!r&&(r=a),s&&r&&this._promiseCallbacks.set(n,{resolve:s,reject:r}),this.eventPoster.postMessage(JSON.stringify(["rml."+e,n,t]))}resolvePromises(e,t){const s=this._promiseCallbacks.get(e);s&&(s.resolve.apply(s,Array.isArray(t)?[t]:t),this._promiseCallbacks.delete(e))}}export{MainThreadToWorker as a,getAllParameters as b};
//# sourceMappingURL=chunk-9ffef419.js.map
