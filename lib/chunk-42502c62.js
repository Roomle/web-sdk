import"./chunk-160ac280.js";import{h as InputManager,A as DependencyInjectionAssignment,C as ScriptLoader,E as DomHelper,B as Logger,l as CameraControl3D,R as LightSetting,w as getGUI,n as CANVAS_ID,v as BakedShadowEnvironment,z as dispose,G as Main,H as RoomleDependencyInjection,a as Benchmark}from"./chunk-14282ba6.js";import{a as __decorate,b as inject}from"./chunk-9f117dd9.js";import{a as DefaultLightSetting}from"./chunk-4ab57b37.js";import{a as SceneManager}from"./chunk-ded15bcf.js";const INJECTABLES=[new DependencyInjectionAssignment("script-loader",ScriptLoader),new DependencyInjectionAssignment("dom-helper",DomHelper,1),new DependencyInjectionAssignment("glb-input-manager",class extends InputManager{},1),new DependencyInjectionAssignment("logger",Logger)];class AdjustableCameraControl3D extends CameraControl3D{constructor(){super(...arguments),this.shouldIgnoreStandardBehavior=!1}adjust(e,t,n,i,s){let r=new THREE.Vector3(-e.x/2,0,-e.z/2),a=new THREE.Vector3(e.x/2,e.y,e.z/2);this._boundingBox=new THREE.Box3(r,a);let o=new THREE.Euler(-Math.PI/2+i,n,0,"ZYX"),h=(new THREE.Quaternion).setFromEuler(o);this._camera.updateProjectionMatrix(),this._camera.quaternion.copy(h),this._camera.position.copy(t)}_setDistanceAndRangesBasedOnBounds(e,t,n){let i=super._setDistanceAndRangesBasedOnBounds(e,t,n);return this.maxDistance=1.1*i,i}_update(e){this.shouldIgnoreStandardBehavior?this._saveYawAndPitch():super._update(e)}animateCamera(e){return!!this.shouldIgnoreStandardBehavior||super.animateCamera(e)}}class GLBViewerLightSetting extends LightSetting{constructor(e,t){super(e,t),this._params={ambientLight:{color:"#ffffff"}},this._ambientLight=new THREE.AmbientLight(new THREE.Color(this._params.ambientLight.color),.5),this.addToScene()}addToScene(){this._scene.add(this._ambientLight)}removeFromScene(){this._scene.remove(this._ambientLight)}reload(){this.removeFromScene(),this.addToScene()}showGUI(){let e=getGUI();if(this._ambientLight){let t=e.addFolder("Ambient Light");t.add(this._ambientLight,"visible"),t.add(this._ambientLight,"intensity").min(0).max(5).step(.1),t.addColor(this._params.ambientLight,"color").onChange(e=>{this._ambientLight.color=new THREE.Color(e)})}}}class GLBViewerSceneManager extends SceneManager{constructor(e,t){super(e,t,CANVAS_ID.GLB,"3D",!0),this._itemsCount=0,this._standardSceneBackgroundColor=this._scene.background,this._lightSetting=new GLBViewerLightSetting(this._scene),this._setEnvironment(new BakedShadowEnvironment(this._scene,this._environment))}createCameraControl(e){this._cameraControl=new AdjustableCameraControl3D(this._creator_,this._getInputManager(),new THREE.Vector3(-1,1,1))}_getInputManager(){return this._glbInputManager}loadGLB(e,t=!0,n){return this.clearScene(),new Promise((i,s)=>{this._loadGLB(e,new THREE.Vector3(0,0,0),0,void 0,n).then(e=>{this._currentGLB=e,this._scene.add(this._currentGLB);let{x:n,y:s}=this._domHelper.getClientDimensions(),r=(new THREE.Box3).setFromObject(this._currentGLB),a=r.getSize(new THREE.Vector3);if(this._environment&&this._environment.needsBounds()&&this._environment.updateBounds(a),t){let e=r.getCenter(new THREE.Vector3);this._cameraControl instanceof AdjustableCameraControl3D&&(this._cameraControl.updateToBounds(r,n,s,!1,!0,e),this._cameraControl.reset(a,n,s,e,-15,0)),this._requestRender()}if(this._pixotronUtil){const e=new THREE.Sphere;r.getBoundingSphere(e),this._pixotronUtil.updateBounds(e)}i()},s)})}preparePerspectiveImage(e,t,n){return new Promise((i,s)=>{t||(t=1e3),n||(n=1e3),e||((e=new THREE.WebGLRenderer({antialias:!0})).setSize(t,n),e.gammaInput=!0,e.gammaOutput=!0,e.autoClear=!1,e.shadowMap.enabled=!0,e.shadowMap.type=THREE.BasicShadowMap,e.toneMapping=THREE.Uncharted2ToneMapping,e.toneMappingWhitePoint=6,e.toneMappingExposure=3);let r=this._cameraControl.getCamera().clone();r instanceof THREE.PerspectiveCamera&&(r.aspect=t/n,r.updateProjectionMatrix()),this._lightSetting.removeFromScene();let a=new DefaultLightSetting(this._scene);e.render(this._scene,r);let o=e.domElement.toDataURL();e.domElement.toBlob(e=>{i({image:o,width:t,height:n,blob:e})},"image/png"),a.removeFromScene(),this._lightSetting.addToScene()})}adjustCamera(e,t,n,i){if(this._cameraControl instanceof AdjustableCameraControl3D){let s=(new THREE.Box3).setFromObject(this._scene).getSize(new THREE.Vector3);this._cameraControl.adjust(s,e,t,n,i),this._requestRender()}}onStart(e){this._itemsCount=e,this._scene.background=null,this._cameraControl instanceof AdjustableCameraControl3D&&(this._cameraControl.shouldIgnoreStandardBehavior=!0)}onElementFinished(e){this._itemsCount,Math.round(100/this._itemsCount*e)}onFinished(e){this._scene.background=this._standardSceneBackgroundColor,this._cameraControl instanceof AdjustableCameraControl3D&&(this._cameraControl.shouldIgnoreStandardBehavior=!1)}clearScene(){this._currentGLB&&(this._scene.remove(this._currentGLB),dispose(this._currentGLB),this._currentGLB=null),super.clearScene()}enableHD(){super.enableHD(),this._pixotron.enableAA=!1,this._pixotron.getSAOPass().enabled=!0}sceneChanged(){}getPixotronParams(){return{saoparams:{intensity:.25,occlusionWorldRadius:.4,smoothTransition:!0,samplesPerFrame:4,bias:.016,numSamples:200,accumulative:!1,falloff:1.5},shadowparams:{shadowMapResolution:1024,shadowRadius:3,shadowQuality:1,smoothTransition:!0,enableAccumulation:!0,shadowBiasMultiplier:.6,nearPlane:.01,farPlane:50,fov:110,side:THREE.FrontSide,numSamples:100},groundShadow:{enable:!1,shadowMapResolution:512,smoothTransition:!0,numSamples:500,numSamplesPerFrame:4,onComplete:this._addGroundShadows.bind(this),bShadowMaterial:!0,falloff:1.5,darkness:.4,size:1.6,lightDirection:new THREE.Vector3(0,1,.5),lightSolidAngle:40}}}}__decorate([inject],GLBViewerSceneManager.prototype,"_glbInputManager",void 0);class GLBRenderWorker{constructor(e,t,n){this._prefix="https://furniture.roomle.com/3d/glb/",this._listeners=new Set,this._finishedItems=0,this._sceneManager=e,this._renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this._width=t,this._height=n,this._renderer.setSize(t,n),this._renderer.setClearColor(16777215,0),this._renderer.gammaInput=!0,this._renderer.gammaOutput=!0}addListener(e){this._listeners.add(e)}removeListener(e){this._listeners.delete(e)}start(e){return this._entries=[],e.forEach(e=>{this._entries.push(this._transform(e))}),this._finishedItems=0,this._listeners.forEach(e=>e.onStart(this._entries.length)),this._zip=new window.JSZip,this._doNextEntry(),new Promise((e,t)=>{this._resolve=e})}_transform(e){return{name:e.path.replace(".glb",".png"),url:this._prefix+e.path,position:new THREE.Vector3(e.camera.position.x,e.camera.position.z,-e.camera.position.y),fov:2*e.camera.fieldOfView,yaw:e.camera.rotation.z,pitch:e.camera.rotation.x}}_doNextEntry(){0===this._entries.length?(this._listeners.forEach(e=>e.onFinished(this._zip)),this._resolve(this._zip)):this._processEntry(this._entries[0])}_processEntry(e){this._sceneManager.loadGLB(e.url,!1,void 0).then(()=>{this._sceneManager.adjustCamera(e.position,e.yaw,e.pitch,e.fov),this._sceneManager.preparePerspectiveImage(this._renderer,this._width,this._height).then(t=>{this._entryFinished(e,t)})})}_entryFinished(e,t){let n=this._entries.indexOf(e);n>-1&&this._entries.splice(n,1),this._finishedItems++,this._listeners.forEach(e=>e.onElementFinished(this._finishedItems)),this._zip.file(e.name,t.blob),this._doNextEntry()}}class RoomleGLBViewer{constructor(e){this._creator_=e}init(e){return this._domHelper.setDomElement(e),this._sceneManager?(this._lifeCycleManager.resume(),Promise.resolve()):new Promise(this._initPromiseCallback.bind(this))}_initPromiseCallback(e,t){this._threeLoader.fetch().then(()=>{let t=this._scriptLoader.fetch("static/three/lib/loaders/GLTFLoader.js",{id:"gltf-loader"}),n=this._scriptLoader.fetch("static/three/lib/loaders/draco/DRACOLoader.js",{id:"draco-loader"}),i=this._scriptLoader.fetch("static/three/Tween.js",{id:"tween-js"});Promise.all([t,n,i]).then(()=>{this._sceneManager=new GLBViewerSceneManager(this._creator_,{left:0,top:1,right:1,bottom:0}),this.enableHD(),e()})})}enableHD(){return new Promise((e,t)=>{const n=()=>{this._sceneManager.enableHD(),e()};Promise.all([this._scriptLoader.fetch("static/three/lib/postprocessing/EffectComposer.js",{id:"effect-composer-js"}),this._scriptLoader.fetch("static/three/lib/lights/RectAreaLightUniformsLib.js",{id:"rect-area-light-uniforms-lib-js"}),this._scriptLoader.fetch("static/three/lib/postprocessing/ShaderPass.js",{id:"shader-pass-js"}),this._scriptLoader.fetch("static/three/lib/postprocessing/RenderPass.js",{id:"render-pass-js"}),this._scriptLoader.fetch("static/three/lib/shaders/CopyShader.js",{id:"copy-shader-js"})]).then(()=>{this._scriptLoader.fetch("static/three/pi.min.js",{id:"pi-js"}).then(n,t)},t)})}loadGLB(e,t=1){return this._sceneManager.loadGLB(e,!0,new THREE.Vector3(t,t,t))}loadSceneSetting(e){return this._sceneManager.loadSceneSettings(e)}loadQualitySetting(e){this._sceneManager.loadQualitySetting(e)}preparePerspectiveImage(){return this._sceneManager.preparePerspectiveImage()}processRenderList(e,t=320,n=320){let i=JSON.parse(e);this._scriptLoader.fetch("static/jszip/lib/jszip.js",{id:"jszip-js"}).then(()=>{let e=new GLBRenderWorker(this._sceneManager,t,n);e.addListener(this._sceneManager),e.start(i.items).then(t=>{t.generateAsync({type:"blob"}).then(t=>{let n=document.createElement("a");n.href=URL.createObjectURL(t),n.download="content.zip",n.style.display="none",document.body.appendChild(n),n.click(),document.body.removeChild(n),e.removeListener(this._sceneManager)})})})}setOverrides(e){if(!e)return;const t=Object.assign(window.__RML__ENV__.initData,e);window.__RML__ENV__.initData=t}updateSize(){this._sceneManager.updateCamera()}resumeTest(e){this._domHelper.setDomElement(e),this._lifeCycleManager.resume()}pauseTest(){this._lifeCycleManager.pause()}showGUI(){this._sceneManager.showGUI()}}__decorate([inject],RoomleGLBViewer.prototype,"_domHelper",void 0),__decorate([inject],RoomleGLBViewer.prototype,"_scriptLoader",void 0),__decorate([inject],RoomleGLBViewer.prototype,"_lifeCycleManager",void 0),__decorate([inject],RoomleGLBViewer.prototype,"_threeLoader",void 0);class GlbViewer extends Main{setupGlobals(){}setupDependencies(){RoomleDependencyInjection.setup(INJECTABLES),this._context=RoomleDependencyInjection.getContext("glb-viewer"),this.lookup("logger",this._context)}cleanUpGlobals(){throw new Error("Method not implemented.")}cleanUpDependencies(){throw new Error("Method not implemented.")}constructor(){super(),Benchmark.start("loadingTime")}bootFinished(){this._viewer=new RoomleGLBViewer(this._context),window.RoomleGLBViewer||(window.RoomleGLBViewer=this._viewer)}getApi(){return this._viewer}}export{GlbViewer};
//# sourceMappingURL=chunk-42502c62.js.map
