THREE.CubemapGenerator=function(e){this.renderer=e},THREE.CubemapGenerator.prototype.fromEquirectangular=function(e,t){t=t||{};var n=new THREE.Scene,r=new THREE.ShaderMaterial({type:"CubemapFromEquirect",uniforms:THREE.UniformsUtils.clone({tEquirect:{value:null}}),vertexShader:"\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t//include <common>\n\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t#include <begin_vertex>\n\t\t\t\t#include <project_vertex>\n\n\t\t\t}\n\t\t\t",fragmentShader:"\n\t\t\tuniform sampler2D tEquirect;\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t//include <common>\n\t\t\t#define RECIPROCAL_PI 0.31830988618\n\t\t\t#define RECIPROCAL_PI2 0.15915494\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\tvec2 sampleUV;\n\n\t\t\t\tsampleUV.y = asin( clamp( direction.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\n\t\t\t\tsampleUV.x = atan( direction.z, direction.x ) * RECIPROCAL_PI2 + 0.5;\n\n\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t}\n\t\t\t",side:THREE.BackSide,blending:THREE.NoBlending});r.uniforms.tEquirect.value=e;var i=new THREE.Mesh(new THREE.BoxBufferGeometry(5,5,5),r);n.add(i);var a=t.resolution||512,o={type:e.type,format:e.format,encoding:e.encoding,generateMipmaps:void 0!==t.generateMipmaps?t.generateMipmaps:e.generateMipmaps,minFilter:void 0!==t.minFilter?t.minFilter:e.minFilter,magFilter:void 0!==t.magFilter?t.magFilter:e.magFilter},u=new THREE.CubeCamera(1,10,a,o);return u.update(this.renderer,n),i.geometry.dispose(),i.material.dispose(),u.renderTarget},THREE.EquirectangularToCubeGenerator=function(){var e,t=new THREE.PerspectiveCamera(90,1,.1,10),n=new THREE.Scene,r=new THREE.Mesh(new THREE.BoxBufferGeometry(1,1,1),((e=new THREE.ShaderMaterial({uniforms:{equirectangularMap:{value:null}},vertexShader:"varying vec3 localPosition;\n        \n        void main() {\n          localPosition = position;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }",fragmentShader:"#include <common>\n        varying vec3 localPosition;\n        uniform sampler2D equirectangularMap;\n        \n        vec2 EquirectangularSampleUV(vec3 v) {\n          vec2 uv = vec2(atan(v.z, v.x), asin(v.y));\n          uv *= vec2(0.1591, 0.3183); // inverse atan\n          uv += 0.5;\n          return uv;\n        }\n        \n        void main() {\n          vec2 uv = EquirectangularSampleUV(normalize(localPosition));\n          gl_FragColor = texture2D(equirectangularMap, uv);\n        }",blending:THREE.NoBlending})).type="EquirectangularToCubeGenerator",e));r.material.side=THREE.BackSide,n.add(r);var i=function(e,t){t=t||{},this.sourceTexture=e,this.resolution=t.resolution||512,this.views=[{t:[1,0,0],u:[0,-1,0]},{t:[-1,0,0],u:[0,-1,0]},{t:[0,1,0],u:[0,0,1]},{t:[0,-1,0],u:[0,0,-1]},{t:[0,0,1],u:[0,-1,0]},{t:[0,0,-1],u:[0,-1,0]}];var n={format:t.format||this.sourceTexture.format,magFilter:this.sourceTexture.magFilter,minFilter:this.sourceTexture.minFilter,type:t.type||this.sourceTexture.type,generateMipmaps:this.sourceTexture.generateMipmaps,anisotropy:this.sourceTexture.anisotropy,encoding:this.sourceTexture.encoding};this.renderTarget=new THREE.WebGLRenderTargetCube(this.resolution,this.resolution,n)};return i.prototype={constructor:i,update:function(e){r.material.uniforms.equirectangularMap.value=this.sourceTexture;for(var i=0;i<6;i++){this.renderTarget.activeCubeFace=i;var a=this.views[i];t.position.set(0,0,0),t.up.set(a.u[0],a.u[1],a.u[2]),t.lookAt(a.t[0],a.t[1],a.t[2]),e.render(n,t,this.renderTarget,!0)}return this.renderTarget.texture},dispose:function(){this.renderTarget.dispose()}},i}();