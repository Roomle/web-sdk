class ScenePluginDefaultImplementation{constructor(e){this._creator_=e}setScene(e){}setUiScene(e){}updateBounds(e){}clearScene(e,s){}moveCameraEnd(e){}moveCameraStart(e){}needsUiScene(){return!1}}class PluginSystem{constructor(e){this._plugins=[],this._creator_=e}async init(e,s,t){this._scene=e,this._uiScene=s,this._cameraPosition=t;const{bananaForScale:n}=window.__RML__ENV__.initData;n&&await import("./chunk-bd98305a.js").then(({default:e})=>this._plugins.push(new e(this._creator_))),this._plugins.forEach(e=>e.setScene(this._scene)),this._plugins.forEach(e=>e.setUiScene(this._uiScene)),this._plugins.forEach(e=>e.updateBounds(this._bounds)),this._plugins.forEach(e=>e.moveCameraEnd(this._cameraPosition))}addPlugin(e){this._plugins.push(e),e.setScene(this._scene),e.setUiScene(this._uiScene),e.updateBounds(this._bounds),e.moveCameraEnd(this._cameraPosition)}updateBounds(e){this._bounds=e,this._plugins.forEach(s=>s.updateBounds(e))}clearScene(e,s){this._plugins.forEach(t=>t.clearScene(e,s))}getActivePlugins(){return this._plugins}getPlugin(e){for(let s of this._plugins)if(s instanceof e)return s;return null}moveCameraEnd(e){this._cameraPosition=e,this._plugins.forEach(s=>s.moveCameraEnd(e))}moveCameraStart(e){this._cameraPosition=e,this._plugins.forEach(s=>s.moveCameraStart(e))}needsUiScene(){return this._plugins.map(e=>e.needsUiScene()).reduce((e,s)=>e||s,!1)}}export{PluginSystem as a,ScenePluginDefaultImplementation as b};
//# sourceMappingURL=chunk-7309c755.js.map
